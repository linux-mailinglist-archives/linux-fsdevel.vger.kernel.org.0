Return-Path: <linux-fsdevel-owner@vger.kernel.org>
X-Original-To: lists+linux-fsdevel@lfdr.de
Delivered-To: lists+linux-fsdevel@lfdr.de
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by mail.lfdr.de (Postfix) with ESMTP id 05BF53F6BB3
	for <lists+linux-fsdevel@lfdr.de>; Wed, 25 Aug 2021 00:28:10 +0200 (CEST)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S232099AbhHXW2w (ORCPT <rfc822;lists+linux-fsdevel@lfdr.de>);
        Tue, 24 Aug 2021 18:28:52 -0400
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:47616 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S229605AbhHXW2v (ORCPT
        <rfc822;linux-fsdevel@vger.kernel.org>);
        Tue, 24 Aug 2021 18:28:51 -0400
Received: from mail-ed1-x533.google.com (mail-ed1-x533.google.com [IPv6:2a00:1450:4864:20::533])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id 9250AC0613C1
        for <linux-fsdevel@vger.kernel.org>; Tue, 24 Aug 2021 15:28:06 -0700 (PDT)
Received: by mail-ed1-x533.google.com with SMTP id d6so34036535edt.7
        for <linux-fsdevel@vger.kernel.org>; Tue, 24 Aug 2021 15:28:06 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=paul-moore-com.20150623.gappssmtp.com; s=20150623;
        h=mime-version:references:in-reply-to:from:date:message-id:subject:to
         :cc;
        bh=6hkZeZy2+xnAtQuXUMmxKgSMrK4i0nbQ3t/wf4o0qRY=;
        b=MmaJfPHpzRbsJlXZkuzVrbjLlibt11hoE05tPy3m6OqW1mqorfjF3831NjH+2ZVsM0
         3tQ1MDElb4EL6KsuGyo/eRpP8pRZLatz3prx1nOGZYIunfFat1WLQRHvrwHEt92KTvDw
         suP9XqmGqqbszlSoSCrJDknn9Qk/pFkbFxaVFHWIAjCmqUDURgIVb0vk8KX0xRcSS0xe
         k+6A1TqarcNGCICZ+bXg1dPz7SQdziYP38FbzHfFGNQiKTrVaXlB82/bmdG10eHZvw2K
         zH56yKSScerUTS+WljEcvCbcmbqIBsI8hOtobL+d/4DHKXwtmz1X95jqNgWNQ2PC00Vh
         SLiQ==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:references:in-reply-to:from:date
         :message-id:subject:to:cc;
        bh=6hkZeZy2+xnAtQuXUMmxKgSMrK4i0nbQ3t/wf4o0qRY=;
        b=cRTnyYc7mE5I22+czuI973WdTApqjbKp70eteSqPHL6SXZpPf6Jjs1Uw+a4NLKNleG
         MLkTWqHwTvTpuaigI9lbm7XnIVx4qh3DtNZmHQzeS0tP4ujS+36mW8Q5dvVScgR+Azf9
         tzYJSAPYua9E521Kdim4wE4bc1g45y5PgcrrIYYGYXgCyxrnYfhKQvDm995R1A7hRxPV
         2KrAKUJcL1wp6CvOPs9p91m0U8fRSCEcRsDh5XzvWzmpmILiqxsDtCXtzNeSleV+Gs9z
         CJO7w4PTPXV13j9C06r3seDsLFYVyqaGyHTYtwCxps1YpEsVrA/PwvIZ04FJrF29HjPA
         uHYQ==
X-Gm-Message-State: AOAM530+yB4YMPD2FU6G2TK2r9Raiw0hETWcqbfv/JKmO5xVoty1SEuG
        yZuFEbMW9NjeLb/SzaQDJtITDDYh+FT6xUNQiQew
X-Google-Smtp-Source: ABdhPJziBOe5SY3bWwGhrb7aAvJqWfLkgbImlhY5CVyOoivBO4wFGSLnXI7zHb+BwM9x270TA1Ph9HCTAAT96LTfTfk=
X-Received: by 2002:aa7:d982:: with SMTP id u2mr44953224eds.164.1629844084932;
 Tue, 24 Aug 2021 15:28:04 -0700 (PDT)
MIME-Version: 1.0
References: <162871480969.63873.9434591871437326374.stgit@olly> <20210824205724.GB490529@madcap2.tricolour.ca>
In-Reply-To: <20210824205724.GB490529@madcap2.tricolour.ca>
From:   Paul Moore <paul@paul-moore.com>
Date:   Tue, 24 Aug 2021 18:27:53 -0400
Message-ID: <CAHC9VhRoHYG8247SvNgxHe8YCduoMi_oEvZqhyYH=faZUAC=CQ@mail.gmail.com>
Subject: Re: [RFC PATCH v2 0/9] Add LSM access controls and auditing to io_uring
To:     Richard Guy Briggs <rgb@redhat.com>
Cc:     linux-security-module@vger.kernel.org, selinux@vger.kernel.org,
        linux-audit@redhat.com, io-uring@vger.kernel.org,
        linux-fsdevel@vger.kernel.org,
        Kumar Kartikeya Dwivedi <memxor@gmail.com>,
        Jens Axboe <axboe@kernel.dk>,
        Pavel Begunkov <asml.silence@gmail.com>
Content-Type: multipart/mixed; boundary="000000000000b8e52705ca55a5a6"
Precedence: bulk
List-ID: <linux-fsdevel.vger.kernel.org>
X-Mailing-List: linux-fsdevel@vger.kernel.org

--000000000000b8e52705ca55a5a6
Content-Type: text/plain; charset="UTF-8"

On Tue, Aug 24, 2021 at 4:57 PM Richard Guy Briggs <rgb@redhat.com> wrote:
> Thanks for the tests.  I have a bunch of userspace patches to add to the
> last set I posted and these tests will help exercise them.  I also have
> one more kernel patch to post...  I'll dive back into that now.  I had
> wanted to post them before now but got distracted with AUDIT_TRIM
> breakage.

If it helps, last week I started working on a little test tool for the
audit-testsuite and selinux-testsuite (see attached).  It may not be
final, but I don't expect too many changes to it before I post the
test suite patches; it is definitely usable now.  It's inspired by the
previous tests, but it uses a much more test suite friendly fork/exec
model for testing the sharing of io_urings across process boundaries.

Would you mind sharing your latest userspace patches, if not publicly
I would be okay with privately off-list; I'm putting together the test
suite patches this week and it would be good to make sure I'm using
your latest take on the userspace changes.

Also, what is the kernel patch?  Did you find a bug or is this some
new functionality you think might be useful?  Both can be important,
but the bug is *really* important; even if you don't have a fix for
that, just a description of the problem would be good.

-- 
paul moore
www.paul-moore.com

--000000000000b8e52705ca55a5a6
Content-Type: text/x-csrc; charset="US-ASCII"; name="iouring.4.c"
Content-Disposition: attachment; filename="iouring.4.c"
Content-Transfer-Encoding: base64
Content-ID: <f_ksqn1u1n0>
X-Attachment-Id: f_ksqn1u1n0

LyoKICogaW9fdXJpbmcgdGVzdCB0b29sIHRvIGV4ZXJjaXNlIExTTS9TRUxpbnV4IGFuZCBhdWRp
dCBrZXJuZWwgY29kZSBwYXRocwogKiBBdXRob3I6IFBhdWwgTW9vcmUgPHBhdWxAcGF1bC1tb29y
ZS5jb20+CiAqCiAqIENvcHlyaWdodCAyMDIxIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbgogKgogKiBB
dCB0aGUgdGltZSB0aGlzIGNvZGUgd2FzIHdyaXR0ZW4gdGhlIGJlc3QsIGFuZCBtb3N0IGN1cnJl
bnQsIHNvdXJjZSBvZiBpbmZvCiAqIG9uIGlvX3VyaW5nIHNlZW1lZCB0byBiZSB0aGUgbGlidXJp
bmcgc291cmNlcyB0aGVtc2VsdmVzIChsaW5rIGJlbG93KS4gIFRoZQogKiBjb2RlIGJlbG93IGlz
IGJhc2VkIG9uIHRoZSBsZXNzb25zIGxlYXJuZWQgZnJvbSBsb29raW5nIGF0IHRoZSBsaWJ1cmlu
ZwogKiBjb2RlLgogKgogKiAtPiBodHRwczovL2dpdGh1Yi5jb20vYXhib2UvbGlidXJpbmcKICoK
ICogVGhlIGxpYnVyaW5nIExJQ0VOU0UgZmlsZSBjb250YWlucyB0aGUgZm9sbG93aW5nOgogKgog
KiBDb3B5cmlnaHQgMjAyMCBKZW5zIEF4Ym9lCiAqCiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdy
YW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkKICog
b2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUg
IlNvZnR3YXJlIiksIHRvCiAqIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rp
b24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlCiAqIHJpZ2h0cyB0byB1c2UsIGNv
cHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9v
cgogKiBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0
byB3aG9tIHRoZSBTb2Z0d2FyZSBpcwogKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8g
dGhlIGZvbGxvd2luZyBjb25kaXRpb25zOgogKgogKiAgVGhlIGFib3ZlIGNvcHlyaWdodCBub3Rp
Y2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4KICogIGFs
bCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLgogKgogKiAg
VEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICJBUyBJUyIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5Z
IEtJTkQsIEVYUFJFU1MgT1IKICogIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQg
VE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLAogKiAgRklUTkVTUyBGT1IgQSBQ
QVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwg
VEhFCiAqICBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENM
QUlNLCBEQU1BR0VTIE9SIE9USEVSCiAqICBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9O
IE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORwogKiAgRlJPTSwgT1VUIE9G
IE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUgog
KiAgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLgogKgogKi8KCi8qCiAqIEJVSUxESU5HOgogKgog
KiBnY2MgLW8gPGJpbmFyeT4gLWcgLU8wIC1sdXJpbmcgLWxydCA8c291cmNlPgogKgogKiBSVU5O
SU5HOgogKgogKiBUaGUgcHJvZ3JhbSBjYW4gYmUgcnVuIHVzaW5nIHRoZSBmb2xsb3dpbmcgY29t
bWFuZCBsaW5lczoKICoKICogICUgcHJvZyBzcXBvbGwKICogLi4uIHRoaXMgaW52b2NhdGlvbiBy
dW5zIHRoZSBpb191cmluZyBTUVBPTEwgdGVzdC4KICoKICogICUgcHJvZyB0MQogKiAuLi4gdGhp
cyBpbnZvY2F0aW9uIHJ1bnMgdGhlIHBhcmVudC9jaGlsZCBpb191cmluZyBzaGFyaW5nIHRlc3Qu
CiAqCiAqICAlIHByb2cgdDEgPGRvbWFpbj4KICogLi4uIHRoaXMgaW52b2NhdGlvbiBydW5zIHRo
ZSBwYXJlbnQvY2hpbGQgaW9fdXJpbmcgc2hhcmluZyB0ZXN0IHdpdGggdGhlCiAqIGNoaWxkIHBy
b2Nlc3MgcnVuIGluIHRoZSBzcGVjaWZpZWQgU0VMaW51eCBkb21haW4uCiAqCiAqLwoKI2luY2x1
ZGUgPHN0ZGxpYi5oPgojaW5jbHVkZSA8c3RkaW8uaD4KI2luY2x1ZGUgPGVycm5vLmg+CiNpbmNs
dWRlIDxzdHJpbmcuaD4KI2luY2x1ZGUgPGZjbnRsLmg+CiNpbmNsdWRlIDx1bmlzdGQuaD4KI2lu
Y2x1ZGUgPHN5cy9tbWFuLmg+CiNpbmNsdWRlIDxzeXMvc3RhdC5oPgojaW5jbHVkZSA8c3lzL3dh
aXQuaD4KCiNpbmNsdWRlIDxsaWJ1cmluZy5oPgoKc3RydWN0IHVydF9jb25maWcgewoJc3RydWN0
IGlvX3VyaW5nIHJpbmc7CglzdHJ1Y3QgaW9fdXJpbmdfcGFyYW1zIHJpbmdfcGFyYW1zOwoJaW50
IHJpbmdfY3JlZHM7Cn07CgojZGVmaW5lIFVSSU5HX0VOVFJJRVMJCQkJOAojZGVmaW5lIFVSSU5H
X1NITV9OQU1FCQkJCSIvaW91cmluZ190ZXN0XzQiCgppbnQgc2VsaW51eF9zdGF0ZSA9IC0xOwoj
ZGVmaW5lIFNFTElOVVhfQ1RYX01BWAkJCQk1MTIKY2hhciBzZWxpbnV4X2N0eFtTRUxJTlVYX0NU
WF9NQVhdID0gIlwwIjsKCi8qKgogKiBEaXNwbGF5IGFuIGVycm9yIG1lc3NhZ2UgYW5kIGV4aXQK
ICogQHBhcmFtIG1zZyB0aGUgZXJyb3IgbWVzc2FnZQogKgogKiBPdXRwdXQgQG1zZyB0byBzdGRl
cnIgYW5kIGV4aXQgd2l0aCBlcnJubyBhcyB0aGUgZXhpdCB2YWx1ZS4KICovCnZvaWQgZmF0YWwo
Y29uc3QgY2hhciAqbXNnKQp7Cgljb25zdCBjaGFyICpzdHIgPSAobXNnID8gbXNnIDogInVua25v
d24iKTsKCglpZiAoIWVycm5vKSB7CgkJZXJybm8gPSAxOwoJCWZwcmludGYoc3RkZXJyLCAiJXM6
IHVua25vd24gZXJyb3JcbiIsIG1zZyk7Cgl9IGVsc2UKCQlwZXJyb3Ioc3RyKTsKCglpZiAoZXJy
bm8gPCAwKQoJCWV4aXQoLWVycm5vKTsKCWV4aXQoZXJybm8pOwp9CgovKioKICogRGV0ZXJtaW5l
IGlmIFNFTGludXggaXMgZW5hYmxlZCBhbmQgc2V0IHRoZSBpbnRlcm5hbCBzdGF0ZQogKgogKiBB
dHRlbXB0IHRvIHJlYWQgZnJvbSAvcHJvYy9zZWxmL2F0dHIvY3VycmVudCBhbmQgZGV0ZXJtaW5l
IGlmIFNFTGludXggaXMKICogZW5hYmxlZCwgc3RvcmUgdGhlIGN1cnJlbnQgY29udGV4dC9kb21h
aW4gaW4gQHNlbGludXhfY3R4IGlmIFNFTGludXggaXMKICogZW5hYmxlZC4gIFdlIGF2b2lkIHVz
aW5nIHRoZSBsaWJzZWxpbnV4IEFQSSBpbiBvcmRlciB0byBpbmNyZWFzZSBwb3J0YWJpbGl0eQog
KiBhbmQgbWFrZSBpdCBlYXNpZXIgZm9yIG90aGVyIExTTXMgdG8gYWRvcHQgdGhpcyB0ZXN0Lgog
Ki8KaW50IHNlbGludXhfZW5hYmxlZCh2b2lkKQp7CglpbnQgZmQgPSAtMTsKCXNzaXplX3QgY3R4
X2xlbjsKCWNoYXIgY3R4W1NFTElOVVhfQ1RYX01BWF07CgoJaWYgKHNlbGludXhfc3RhdGUgPj0g
MCkKCQlyZXR1cm4gc2VsaW51eF9zdGF0ZTsKCgkvKiBhdHRlbXB0IHRvIGdldCB0aGUgY3VycmVu
dCBjb250ZXh0ICovCglmZCA9IG9wZW4oIi9wcm9jL3NlbGYvYXR0ci9jdXJyZW50IiwgT19SRE9O
TFkpOwoJaWYgKGZkIDwgMCkKCQlnb3RvIGVycjsKCWN0eF9sZW4gPSByZWFkKGZkLCBjdHgsIFNF
TElOVVhfQ1RYX01BWCAtIDEpOwoJaWYgKGN0eF9sZW4gPD0gMCkKCQlnb3RvIGVycjsKCWNsb3Nl
KGZkKTsKCgkvKiBzYXZlIHRoZSBjdXJyZW50IGNvbnRleHQgKi8KCWN0eFtjdHhfbGVuXSA9ICdc
MCc7CglzdHJjcHkoc2VsaW51eF9jdHgsIGN0eCk7CgoJc2VsaW51eF9zdGF0ZSA9IDE7CglyZXR1
cm4gc2VsaW51eF9zdGF0ZTsKCmVycjoKCWlmIChmZCA+PSAwKQoJCWNsb3NlKGZkKTsKCglzZWxp
bnV4X3N0YXRlID0gMDsKCXJldHVybiBzZWxpbnV4X3N0YXRlOwp9CgovKioKICogUmV0dXJuIHRo
ZSBjdXJyZW50IFNFTGludXggZG9tYWluIG9yICJESVNBQkxFRCIgaWYgU0VMaW51eCBpcyBub3Qg
ZW5hYmxlZAogKgogKiBUaGUgcmV0dXJuZWQgc3RyaW5nIHNob3VsZCBub3QgYmUgZnJlZSgpJ2Qu
CiAqLwpjb25zdCBjaGFyICpzZWxpbnV4X2N1cnJlbnQodm9pZCkKewoJaW50IHJjOwoKCXJjID0g
c2VsaW51eF9lbmFibGVkKCk7CglpZiAoIXJjKQoJCXJldHVybiAiRElTQUJMRUQiOwoKCXJldHVy
biBzZWxpbnV4X2N0eDsKfQoKLyoqCiAqIFNldCB0aGUgU0VMaW51eCBkb21haW4gZm9yIHRoZSBu
ZXh0IGV4ZWMoKSdkIHByb2Nlc3MKICogQHBhcmFtIGN0eCB0aGUgU0VMaW51eCBkb21haW4KICoK
ICogVGhpcyBpcyBzaW1pbGFyIHRvIHRoZSBzZXRleGVjY29uKCkgbGlic2VsaW51eCBBUEkgYnV0
IHdlIGRvIGl0IG1hbnVhbGx5IHRvCiAqIGhlbHAgaW5jcmVhc2UgcG9ydGFiaWxpdHkgYW5kIG1h
a2UgaXQgZWFzaWVyIGZvciBvdGhlciBMU01zIHRvIGFkb3B0IHRoaXMKICogdGVzdC4KICovCmlu
dCBzZWxpbnV4X2V4ZWMoY29uc3QgY2hhciAqY3R4KQp7CglpbnQgZmQgPSAtMTsKCXNzaXplX3Qg
bGVuOwoKCWlmICghY3R4KQoJCXJldHVybiAtRUlOVkFMOwoKCWZkID0gb3BlbigiL3Byb2Mvc2Vs
Zi9hdHRyL2V4ZWMiLCBPX1dST05MWSk7CglpZiAoZmQgPCAwKQoJCXJldHVybiAtZXJybm87Cgls
ZW4gPSB3cml0ZShmZCwgY3R4LCBzdHJsZW4oY3R4KSArIDEpOwoJY2xvc2UoZmQpOwoKCXJldHVy
biBsZW47Cn0KCi8qKgogKiBTZXR1cCB0aGUgaW9fdXJpbmcKICogQHBhcmFtIHJpbmcgdGhlIGlv
X3VyaW5nIHBvaW50ZXIKICogQHBhcmFtIHBhcmFtcyB0aGUgaW9fdXJpbmcgcGFyYW1ldGVycwog
KiBAcGFyYW0gY3JlZHMgcG9pbnRlciB0byB0aGUgY3VycmVudCBwcm9jZXNzJyByZWdpc3RlcmVk
IGlvX3VyaW5nIHBlcnNvbmFsaXR5CiAqCiAqIENyZWF0ZSBhIG5ldyBpb191cmluZyB1c2luZyBA
cGFyYW1zIGFuZCByZXR1cm4gaXQgaW4gQHJpbmcgd2l0aCB0aGUKICogcmVnaXN0ZXJlZCBwZXJz
b25hbGl0eSByZXR1cm5lZCBpbiBAY3JlZHMuICBSZXR1cm5zIDAgb24gc3VjY2VzcywgbmVnYXRp
dmUKICogdmFsdWVzIG9uIGZhaWx1cmUuCiAqLwppbnQgdXJpbmdfc2V0dXAoc3RydWN0IGlvX3Vy
aW5nICpyaW5nLAoJCXN0cnVjdCBpb191cmluZ19wYXJhbXMgKnBhcmFtcywgaW50ICpjcmVkcykK
ewoJaW50IHJjOwoKCS8qIGNhbGwgaW50byBsaWJ1cmluZyB0byBkbyB0aGUgc2V0dXAgaGVhdnkg
bGlmdGluZyAqLwoJcmMgPSBpb191cmluZ19xdWV1ZV9pbml0X3BhcmFtcyhVUklOR19FTlRSSUVT
LCByaW5nLCBwYXJhbXMpOwoJaWYgKHJjIDwgMCkKCQlmYXRhbCgiaW9fdXJpbmdfcXVldWVfaW5p
dF9wYXJhbXMiKTsKCgkvKiByZWdpc3RlciBvdXIgY3JlZHMvcGVyc29uYWxpdHkgKi8KCXJjID0g
aW9fdXJpbmdfcmVnaXN0ZXJfcGVyc29uYWxpdHkocmluZyk7CglpZiAocmMgPCAwKQoJCWZhdGFs
KCJpb191cmluZ19yZWdpc3Rlcl9wZXJzb25hbGl0eSgpIik7CgkqY3JlZHMgPSByYzsKCXJjID0g
MDsKCglwcmludGYoIj4+PiBpb191cmluZyBjcmVhdGVkOyBmZCA9ICVkLCBwZXJzb25hbGl0eSA9
ICVkXG4iLAoJICAgICAgIHJpbmctPnJpbmdfZmQsICpjcmVkcyk7CgoJcmV0dXJuIHJjOwp9Cgov
KioKICogSW1wb3J0IGFuIGV4aXN0aW5nIGlvX3VyaW5nIGJhc2VkIG9uIHRoZSBnaXZlbiBmaWxl
IGRlc2NyaXB0b3IKICogQHBhcmFtIGZkIHRoZSBpb191cmluZydzIGZpbGUgZGVzY3JpcHRvcgog
KiBAcGFyYW0gcmluZyB0aGUgaW9fdXJpbmcgcG9pbnRlcgogKiBAcGFyYW0gcGFyYW1zIHRoZSBp
b191cmluZyBwYXJhbWV0ZXJzCiAqCiAqIFRoaXMgZnVuY3Rpb24gdGFrZXMgYW4gaW9fdXJpbmcg
ZmlsZSBkZXNjcmlwdG9yIGluIEBmZCBhcyB3ZWxsIGFzIHRoZQogKiBpb191cmluZyBwYXJhbWV0
ZXJzIGluIEBwYXJhbXMgYW5kIGNyZWF0ZXMgYSB2YWxpZCBpb191cmluZyBpbiBAcmluZy4KICog
UmV0dXJucyAwIG9uIHN1Y2Nlc3MsIG5lZ2F0aXZlIHZhbHVlcyBvbiBmYWlsdXJlLgogKi8KaW50
IHVyaW5nX2ltcG9ydChpbnQgZmQsIHN0cnVjdCBpb191cmluZyAqcmluZywgc3RydWN0IGlvX3Vy
aW5nX3BhcmFtcyAqcGFyYW1zKQp7CglpbnQgcmM7CgoJbWVtc2V0KHJpbmcsIDAsIHNpemVvZigq
cmluZykpOwoJcmluZy0+ZmxhZ3MgPSBwYXJhbXMtPmZsYWdzOwoJcmluZy0+ZmVhdHVyZXMgPSBw
YXJhbXMtPmZlYXR1cmVzOwoJcmluZy0+cmluZ19mZCA9IGZkOwoKCXJpbmctPnNxLnJpbmdfc3og
PSBwYXJhbXMtPnNxX29mZi5hcnJheSArCgkJCSAgIHBhcmFtcy0+c3FfZW50cmllcyAqIHNpemVv
Zih1bnNpZ25lZCk7CglyaW5nLT5jcS5yaW5nX3N6ID0gcGFyYW1zLT5jcV9vZmYuY3FlcyArCgkJ
CSAgIHBhcmFtcy0+Y3FfZW50cmllcyAqIHNpemVvZihzdHJ1Y3QgaW9fdXJpbmdfY3FlKTsKCgly
aW5nLT5zcS5yaW5nX3B0ciA9IG1tYXAoTlVMTCwgcmluZy0+c3EucmluZ19zeiwgUFJPVF9SRUFE
IHwgUFJPVF9XUklURSwKCQkJCSBNQVBfU0hBUkVEIHwgTUFQX1BPUFVMQVRFLCBmZCwKCQkJCSBJ
T1JJTkdfT0ZGX1NRX1JJTkcpOwoJaWYgKHJpbmctPnNxLnJpbmdfcHRyID09IE1BUF9GQUlMRUQp
CgkJZmF0YWwoImltcG9ydCBtbWFwKHJpbmcpIik7CgoJcmluZy0+Y3EucmluZ19wdHIgPSBtbWFw
KDAsIHJpbmctPmNxLnJpbmdfc3osIFBST1RfUkVBRCB8IFBST1RfV1JJVEUsCgkJCQkgTUFQX1NI
QVJFRCB8IE1BUF9QT1BVTEFURSwKCQkJCSBmZCwgSU9SSU5HX09GRl9DUV9SSU5HKTsKCWlmIChy
aW5nLT5jcS5yaW5nX3B0ciA9PSBNQVBfRkFJTEVEKSB7CgkJcmluZy0+Y3EucmluZ19wdHIgPSBO
VUxMOwoJCWdvdG8gZXJyOwoJfQoKCXJpbmctPnNxLmtoZWFkID0gcmluZy0+c3EucmluZ19wdHIg
KyBwYXJhbXMtPnNxX29mZi5oZWFkOwoJcmluZy0+c3Eua3RhaWwgPSByaW5nLT5zcS5yaW5nX3B0
ciArIHBhcmFtcy0+c3Ffb2ZmLnRhaWw7CglyaW5nLT5zcS5rcmluZ19tYXNrID0gcmluZy0+c3Eu
cmluZ19wdHIgKyBwYXJhbXMtPnNxX29mZi5yaW5nX21hc2s7CglyaW5nLT5zcS5rcmluZ19lbnRy
aWVzID0gcmluZy0+c3EucmluZ19wdHIgKwoJCQkJIHBhcmFtcy0+c3Ffb2ZmLnJpbmdfZW50cmll
czsKCXJpbmctPnNxLmtmbGFncyA9IHJpbmctPnNxLnJpbmdfcHRyICsgcGFyYW1zLT5zcV9vZmYu
ZmxhZ3M7CglyaW5nLT5zcS5rZHJvcHBlZCA9IHJpbmctPnNxLnJpbmdfcHRyICsgcGFyYW1zLT5z
cV9vZmYuZHJvcHBlZDsKCXJpbmctPnNxLmFycmF5ID0gcmluZy0+c3EucmluZ19wdHIgKyBwYXJh
bXMtPnNxX29mZi5hcnJheTsKCglyaW5nLT5zcS5zcWVzID0gbW1hcChOVUxMLAoJCQkgICAgIHBh
cmFtcy0+c3FfZW50cmllcyAqIHNpemVvZihzdHJ1Y3QgaW9fdXJpbmdfc3FlKSwKCQkJICAgICBQ
Uk9UX1JFQUQgfCBQUk9UX1dSSVRFLCBNQVBfU0hBUkVEIHwgTUFQX1BPUFVMQVRFLAoJCQkgICAg
IGZkLCBJT1JJTkdfT0ZGX1NRRVMpOwoJaWYgKHJpbmctPnNxLnNxZXMgPT0gTUFQX0ZBSUxFRCkK
CQlnb3RvIGVycjsKCglyaW5nLT5jcS5raGVhZCA9IHJpbmctPmNxLnJpbmdfcHRyICsgcGFyYW1z
LT5jcV9vZmYuaGVhZDsKCXJpbmctPmNxLmt0YWlsID0gcmluZy0+Y3EucmluZ19wdHIgKyBwYXJh
bXMtPmNxX29mZi50YWlsOwoJcmluZy0+Y3Eua3JpbmdfbWFzayA9IHJpbmctPmNxLnJpbmdfcHRy
ICsgcGFyYW1zLT5jcV9vZmYucmluZ19tYXNrOwoJcmluZy0+Y3Eua3JpbmdfZW50cmllcyA9IHJp
bmctPmNxLnJpbmdfcHRyICsKCQkJCSBwYXJhbXMtPmNxX29mZi5yaW5nX2VudHJpZXM7CglyaW5n
LT5jcS5rb3ZlcmZsb3cgPSByaW5nLT5jcS5yaW5nX3B0ciArIHBhcmFtcy0+Y3Ffb2ZmLm92ZXJm
bG93OwoJcmluZy0+Y3EuY3FlcyA9IHJpbmctPmNxLnJpbmdfcHRyICsgcGFyYW1zLT5jcV9vZmYu
Y3FlczsKCWlmIChwYXJhbXMtPmNxX29mZi5mbGFncykKCQlyaW5nLT5jcS5rZmxhZ3MgPSByaW5n
LT5jcS5yaW5nX3B0ciArIHBhcmFtcy0+Y3Ffb2ZmLmZsYWdzOwoKCXJldHVybiAwOwoKZXJyOgoJ
aWYgKHJpbmctPnNxLnJpbmdfcHRyKQoJCW11bm1hcChyaW5nLT5zcS5yaW5nX3B0ciwgcmluZy0+
c3EucmluZ19zeik7CglpZiAocmluZy0+Y3EucmluZ19wdHIpOwoJCW11bm1hcChyaW5nLT5jcS5y
aW5nX3B0ciwgcmluZy0+Y3EucmluZ19zeik7CglmYXRhbCgiaW1wb3J0IG1tYXAiKTsKfQoKdm9p
ZCB1cmluZ19zaHV0ZG93bihzdHJ1Y3QgaW9fdXJpbmcgKnJpbmcpCnsKCWlmICghcmluZykKCQly
ZXR1cm47Cglpb191cmluZ19xdWV1ZV9leGl0KHJpbmcpOwp9CgovKioKICogQW4gaW9fdXJpbmcg
dGVzdAogKiBAcGFyYW0gcmluZyB0aGUgaW9fdXJpbmcgcG9pbnRlcgogKiBAcGFyYW0gcGVyc29u
YWxpdHkgdGhlIHJlZ2lzdGVyZWQgcGVyc29uYWxpdHkgdG8gdXNlIG9yIDAKICogQHBhcmFtIHBh
dGggdGhlIGZpbGUgcGF0aCB0byB1c2UgZm9yIHRoZSB0ZXN0CiAqCiAqIFRoaXMgZnVuY3Rpb24g
ZXhlY3V0ZXMgYW4gaW9fdXJpbmcgdGVzdCwgc2VlIHRoZSBmdW5jdGlvbiBib2R5IGZvciBtb3Jl
CiAqIGRldGFpbHMuICBSZXR1cm5zIDAgb24gc3VjY2VzcywgbmVnYXRpdmUgdmFsdWVzIG9uIGZh
aWx1cmUuCiAqLwppbnQgdXJpbmdfb3BfYShzdHJ1Y3QgaW9fdXJpbmcgKnJpbmcsIGludCBwZXJz
b25hbGl0eSwgY29uc3QgY2hhciAqcGF0aCkKewoKI2RlZmluZSBfX09QX0FfQlNJWkUJCTUxMgoj
ZGVmaW5lIF9fT1BfQV9TVFIJCSJMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldC5cbiIKCglpbnQg
cmM7CglpbnQgZmRzWzFdOwoJY2hhciBidWYxW19fT1BfQV9CU0laRV07CgljaGFyIGJ1ZjJbX19P
UF9BX0JTSVpFXTsKCXN0cnVjdCBpb191cmluZ19zcWUgKnNxZTsKCXN0cnVjdCBpb191cmluZ19j
cWUgKmNxZTsKCWludCBzdHJfc3ogPSBzdHJsZW4oX19PUF9BX1NUUik7CgoJbWVtc2V0KGJ1ZjEs
IDAsIF9fT1BfQV9CU0laRSk7CgltZW1zZXQoYnVmMiwgMCwgX19PUF9BX0JTSVpFKTsKCXN0cm5j
cHkoYnVmMSwgX19PUF9BX1NUUiwgc3RyX3N6KTsKCglpZiAocGVyc29uYWxpdHkgPiAwKQoJCXBy
aW50ZigiPj4+IGlvX3VyaW5nIG9wcyB1c2luZyBwZXJzb25hbGl0eSA9ICVkXG4iLAoJCSAgICAg
ICBwZXJzb25hbGl0eSk7CgoJLyoKCSAqIG9wZW4KCSAqLwoKCXNxZSA9IGlvX3VyaW5nX2dldF9z
cWUocmluZyk7CglpZiAoIXNxZSkKCQlmYXRhbCgiaW9fdXJpbmdfZ2V0X3NxZShvcGVuKSIpOwoJ
aW9fdXJpbmdfcHJlcF9vcGVuYXQoc3FlLCBBVF9GRENXRCwgcGF0aCwKCQkJICAgICBPX1JEV1Ig
fCBPX1RSVU5DIHwgT19DUkVBVCwgMDY0NCk7CglpZiAocGVyc29uYWxpdHkgPiAwKQoJCXNxZS0+
cGVyc29uYWxpdHkgPSBwZXJzb25hbGl0eTsKCglyYyA9IGlvX3VyaW5nX3N1Ym1pdChyaW5nKTsK
CWlmIChyYyA8IDApCgkJZmF0YWwoImlvX3VyaW5nX3N1Ym1pdChvcGVuKSIpOwoKCXJjID0gaW9f
dXJpbmdfd2FpdF9jcWUocmluZywgJmNxZSk7CglmZHNbMF0gPSBjcWUtPnJlczsKCWlmIChyYyA8
IDApCgkJZmF0YWwoImlvX3VyaW5nX3dhaXRfY3FlKG9wZW4pIik7CglpZiAoZmRzWzBdIDwgMCkK
CQlmYXRhbCgidXJpbmdfb3BlbiIpOwoJaW9fdXJpbmdfY3FlX3NlZW4ocmluZywgY3FlKTsKCgly
YyA9IGlvX3VyaW5nX3JlZ2lzdGVyX2ZpbGVzKHJpbmcsIGZkcywgMSk7CglpZihyYykKCQlmYXRh
bCgiaW9fdXJpbmdfcmVnaXN0ZXJfZmlsZXMiKTsKCglwcmludGYoIj4+PiBpb191cmluZyBvcGVu
KCk6IE9LXG4iKTsKCgkvKgoJICogd3JpdGUKCSAqLwoKCXNxZSA9IGlvX3VyaW5nX2dldF9zcWUo
cmluZyk7CglpZiAoIXNxZSkKCQlmYXRhbCgiaW9fdXJpbmdfZ2V0X3NxZSh3cml0ZTEpIik7Cglp
b191cmluZ19wcmVwX3dyaXRlKHNxZSwgMCwgYnVmMSwgc3RyX3N6LCAwKTsKCWlvX3VyaW5nX3Nx
ZV9zZXRfZmxhZ3Moc3FlLCBJT1NRRV9GSVhFRF9GSUxFKTsKCWlmIChwZXJzb25hbGl0eSA+IDAp
CgkJc3FlLT5wZXJzb25hbGl0eSA9IHBlcnNvbmFsaXR5OwoKCXJjID0gaW9fdXJpbmdfc3VibWl0
KHJpbmcpOwoJaWYgKHJjIDwgMCkKCQlmYXRhbCgiaW9fdXJpbmdfc3VibWl0KHdyaXRlKSIpOwoK
CXJjID0gaW9fdXJpbmdfd2FpdF9jcWUocmluZywgJmNxZSk7CglpZiAocmMgPCAwKQoJCWZhdGFs
KCJpb191cmluZ193YWl0X2NxZSh3cml0ZSkiKTsKCWlmIChjcWUtPnJlcyA8IDApCgkJZmF0YWwo
InVyaW5nX3dyaXRlIik7CglpZiAoY3FlLT5yZXMgIT0gc3RyX3N6KQoJCWZhdGFsKCJ1cmluZ193
cml0ZShsZW5ndGgpIik7Cglpb191cmluZ19jcWVfc2VlbihyaW5nLCBjcWUpOwoKCXByaW50Zigi
Pj4+IGlvX3VyaW5nIHdyaXRlKCk6IE9LXG4iKTsKCgkvKgoJICogcmVhZAoJICovCgoJc3FlID0g
aW9fdXJpbmdfZ2V0X3NxZShyaW5nKTsKCWlmICghc3FlKQoJCWZhdGFsKCJpb191cmluZ19nZXRf
c3FlKHJlYWQxKSIpOwoJaW9fdXJpbmdfcHJlcF9yZWFkKHNxZSwgMCwgYnVmMixfX09QX0FfQlNJ
WkUsIDApOwoJaW9fdXJpbmdfc3FlX3NldF9mbGFncyhzcWUsIElPU1FFX0ZJWEVEX0ZJTEUpOwoJ
aWYgKHBlcnNvbmFsaXR5ID4gMCkKCQlzcWUtPnBlcnNvbmFsaXR5ID0gcGVyc29uYWxpdHk7CgoJ
cmMgPSBpb191cmluZ19zdWJtaXQocmluZyk7CglpZiAocmMgPCAwKQoJCWZhdGFsKCJpb191cmlu
Z19zdWJtaXQocmVhZCkiKTsKCglyYyA9IGlvX3VyaW5nX3dhaXRfY3FlKHJpbmcsICZjcWUpOwoJ
aWYgKHJjIDwgMCkKCQlmYXRhbCgiaW9fdXJpbmdfd2FpdF9jcWUocmVhZCkiKTsKCWlmIChjcWUt
PnJlcyA8IDApCgkJZmF0YWwoInVyaW5nX3JlYWQiKTsKCWlmIChjcWUtPnJlcyAhPSBzdHJfc3op
CgkJZmF0YWwoInVyaW5nX3JlYWQobGVuZ3RoKSIpOwoJaW9fdXJpbmdfY3FlX3NlZW4ocmluZywg
Y3FlKTsKCglpZiAoc3RybmNtcChidWYxLCBidWYyLCBzdHJfc3opKQoJCWZhdGFsKCJzdHJuY21w
KGJ1ZjEsYnVmMikiKTsKCglwcmludGYoIj4+PiBpb191cmluZyByZWFkKCk6IE9LXG4iKTsKCgkv
KgoJICogY2xvc2UKCSAqLwoKCXNxZSA9IGlvX3VyaW5nX2dldF9zcWUocmluZyk7CglpZiAoIXNx
ZSkKCQlmYXRhbCgiaW9fdXJpbmdfZ2V0X3NxZShjbG9zZSkiKTsKCWlvX3VyaW5nX3ByZXBfY2xv
c2Uoc3FlLCAwKTsKCWlmIChwZXJzb25hbGl0eSA+IDApCgkJc3FlLT5wZXJzb25hbGl0eSA9IHBl
cnNvbmFsaXR5OwoKCXJjID0gaW9fdXJpbmdfc3VibWl0KHJpbmcpOwoJaWYgKHJjIDwgMCkKCQlm
YXRhbCgiaW9fdXJpbmdfc3VibWl0KGNsb3NlKSIpOwoKCXJjID0gaW9fdXJpbmdfd2FpdF9jcWUo
cmluZywgJmNxZSk7CglpZiAocmMgPCAwKQoJCWZhdGFsKCJpb191cmluZ193YWl0X2NxZShjbG9z
ZSkiKTsKCWlmIChjcWUtPnJlcyA8IDApCgkJZmF0YWwoInVyaW5nX2Nsb3NlIik7Cglpb191cmlu
Z19jcWVfc2VlbihyaW5nLCBjcWUpOwoKCXJjID0gaW9fdXJpbmdfdW5yZWdpc3Rlcl9maWxlcyhy
aW5nKTsKCWlmIChyYyA8IDApCgkJZmF0YWwoImlvX3VyaW5nX3VucmVnaXN0ZXJfZmlsZXMiKTsK
CglwcmludGYoIj4+PiBpb191cmluZyBjbG9zZSgpOiBPS1xuIik7CgoJcmV0dXJuIDA7Cn0KCi8q
KgogKiBUaGUgbWFpbiBlbnRyeXBvaW50IHRvIHRoZSB0ZXN0IHByb2dyYW0KICogQHBhcmFtIGFy
Z2MgbnVtYmVyIG9mIGNvbW1hbmQgbGluZSBvcHRpb25zCiAqIEBwYXJhbSBhcmd2IHRoZSBjb21t
YW5kIGxpbmUgb3B0aW9ucyBhcnJheQogKi8KaW50IG1haW4oaW50IGFyZ2MsIGNoYXIgKmFyZ3Zb
XSkKewoJaW50IHJjID0gMTsKCWludCByaW5nX3NobV9mZDsKCXN0cnVjdCBpb191cmluZyByaW5n
X3N0b3JhZ2UsICpyaW5nOwoJc3RydWN0IHVydF9jb25maWcgKmNmZ19wOwoKCWVudW0geyBUU1Rf
VU5LTk9XTiwKCSAgICAgICBUU1RfU1FQT0xMLAoJICAgICAgIFRTVF9UMV9QQVJFTlQsIFRTVF9U
MV9DSElMRCB9IHRzdF9tZXRob2Q7CgoJLyogcGFyc2UgdGhlIGNvbW1hbmQgbGluZSBhbmQgZG8g
c29tZSBzYW5pdHkgY2hlY2tzICovCgl0c3RfbWV0aG9kID0gVFNUX1VOS05PV047CglpZiAoYXJn
YyA+PSAyKSB7CgkJaWYgKCFzdHJjbXAoYXJndlsxXSwgInNxcG9sbCIpKQoJCQl0c3RfbWV0aG9k
ID0gVFNUX1NRUE9MTDsKCQllbHNlIGlmICghc3RyY21wKGFyZ3ZbMV0sICJ0MSIpIHx8CgkJCSAh
c3RyY21wKGFyZ3ZbMV0sICJ0MV9wYXJlbnQiKSkKCQkJdHN0X21ldGhvZCA9IFRTVF9UMV9QQVJF
TlQ7CgkJZWxzZSBpZiAoIXN0cmNtcChhcmd2WzFdLCAidDFfY2hpbGQiKSkKCQkJdHN0X21ldGhv
ZCA9IFRTVF9UMV9DSElMRDsKCX0KCWlmICh0c3RfbWV0aG9kID09IFRTVF9VTktOT1dOKSB7CgkJ
ZnByaW50ZihzdGRlcnIsICJ1c2FnZTogJXMgPG1ldGhvZD4gLi4uIFxuIiwgYXJndlswXSk7CgkJ
ZXhpdChFSU5WQUwpOwoJfQoKCS8qIHNpbXBsZSBoZWFkZXIgKi8KCXByaW50ZigiPj4+IHJ1bm5p
bmcgYXMgUElEID0gJWRcbiIsIGdldHBpZCgpKTsKCXByaW50ZigiPj4+IExTTS9TRUxpbnV4ID0g
JXNcbiIsIHNlbGludXhfY3VycmVudCgpKTsKCgkvKgoJICogdGVzdCBzZXR1cCAoaWYgbmVjZXNz
YXJ5KQoJICovCglpZiAodHN0X21ldGhvZCA9PSBUU1RfU1FQT0xMIHx8IHRzdF9tZXRob2QgPT0g
VFNUX1QxX1BBUkVOVCkgewoJCSAvKiBjcmVhdGUgYW4gaW9fdXJpbmcgYW5kIHByZXBhcmUgaXQg
Zm9yIG9wdGlvbmFsIHNoYXJpbmcgKi8KCQlpbnQgZmxhZ3M7CgoJCS8qIGNyZWF0ZSBhIHNobSBz
ZWdtZW50IHRvIGhvbGQgdGhlIGlvX3VyaW5nIGluZm8gKi8KCQlyaW5nX3NobV9mZCA9IHNobV9v
cGVuKFVSSU5HX1NITV9OQU1FLCBPX0NSRUFUIHwgT19SRFdSLAoJCQkJICAgICAgIFNfSVJVU1Ig
fCBTX0lXVVNSKTsKCQlpZiAocmluZ19zaG1fZmQgPCAwKQoJCQlmYXRhbCgic2htX29wZW4oY3Jl
YXRlKSIpOwoKCQlyYyA9IGZ0cnVuY2F0ZShyaW5nX3NobV9mZCwgc2l6ZW9mKHN0cnVjdCB1cnRf
Y29uZmlnKSk7CgkJaWYgKHJjIDwgMCkKCQkJZmF0YWwoImZ0cnVuY2F0ZShzaG0pIik7CgoJCWNm
Z19wID0gbW1hcChOVUxMLCBzaXplb2YoKmNmZ19wKSwgUFJPVF9SRUFEIHwgUFJPVF9XUklURSwK
CQkJICAgICBNQVBfU0hBUkVELCByaW5nX3NobV9mZCwgMCk7CgkJaWYgKCFjZmdfcCkKCQkJZmF0
YWwoIm1tYXAoc2htKSIpOwoKCQkvKiBjcmVhdGUgdGhlIGlvX3VyaW5nICovCgkJbWVtc2V0KCZj
ZmdfcC0+cmluZywgMCwgc2l6ZW9mKGNmZ19wLT5yaW5nKSk7CgkJbWVtc2V0KCZjZmdfcC0+cmlu
Z19wYXJhbXMsIDAsIHNpemVvZihjZmdfcC0+cmluZ19wYXJhbXMpKTsKCQlpZiAodHN0X21ldGhv
ZCA9PSBUU1RfU1FQT0xMKQoJCQljZmdfcC0+cmluZ19wYXJhbXMuZmxhZ3MgfD0gSU9SSU5HX1NF
VFVQX1NRUE9MTDsKCQlyYyA9IHVyaW5nX3NldHVwKCZjZmdfcC0+cmluZywgJmNmZ19wLT5yaW5n
X3BhcmFtcywKCQkJCSAmY2ZnX3AtPnJpbmdfY3JlZHMpOwoJCWlmIChyYykKCQkJZmF0YWwoInVy
aW5nX3NldHVwIik7CgkJcmluZyA9ICZjZmdfcC0+cmluZzsKCgkJLyogZXhwbGljaXRseSBjbGVh
ciBGRF9DTE9FWEVDIG9uIHRoZSBpb191cmluZyAqLwoJCWZsYWdzID0gZmNudGwoY2ZnX3AtPnJp
bmcucmluZ19mZCwgRl9HRVRGRCwgMCk7CgkJaWYgKGZsYWdzIDwgMCkKCQkJZmF0YWwoImZjbnRs
KHJpbmdfc2htX2ZkLGdldGZkKSIpOwoJCWZsYWdzICY9IH5GRF9DTE9FWEVDOwoJCXJjID0gZmNu
dGwoY2ZnX3AtPnJpbmcucmluZ19mZCwgRl9TRVRGRCwgZmxhZ3MpOwoJCWlmIChyYykKCQkJZmF0
YWwoImZjbnRsKHJpbmdfc2htX2ZkLHNldGZkKSIpOwoJfSBlbHNlIGlmICh0c3RfbWV0aG9kID0g
VFNUX1QxX0NISUxEKSB7CgkJLyogaW1wb3J0IGEgcHJldmlvdXNseSBjcmVhdGVkIGFuZCBzaGFy
ZWQgaW9fdXJpbmcgKi8KCgkJLyogb3BlbiB0aGUgZXhpc3Rpbmcgc2htIHNlZ21lbnQgd2l0aCB0
aGUgaW9fdXJpbmcgaW5mbyAqLwoJCXJpbmdfc2htX2ZkID0gc2htX29wZW4oVVJJTkdfU0hNX05B
TUUsIE9fUkRXUiwgMCk7CgkJaWYgKHJpbmdfc2htX2ZkIDwgMCkKCQkJZmF0YWwoInNobV9vcGVu
KGV4aXN0aW5nKSIpOwoJCWNmZ19wID0gbW1hcChOVUxMLCBzaXplb2YoKmNmZ19wKSwgUFJPVF9S
RUFEIHwgUFJPVF9XUklURSwKCQkJICAgICBNQVBfU0hBUkVELCByaW5nX3NobV9mZCwgMCk7CgkJ
aWYgKCFjZmdfcCkKCQkJZmF0YWwoIm1tYXAoc2htKSIpOwoKCQkvKiBpbXBvcnQgdGhlIGlvX3Vy
aW5nICovCgkJcmluZyA9ICZyaW5nX3N0b3JhZ2U7CgkJcmMgPSB1cmluZ19pbXBvcnQoY2ZnX3At
PnJpbmcucmluZ19mZCwKCQkJCSAgcmluZywgJmNmZ19wLT5yaW5nX3BhcmFtcyk7CgkJaWYgKHJj
IDwgMCkKCQkJZmF0YWwoInVyaW5nX2ltcG9ydCIpOwoJfQoKCS8qCgkgKiBmb3JrL2V4ZWMgYSBj
aGlsZCBwcm9jZXNzIChpZiBuZWNlc3NhcnkpCgkgKi8KCWlmICh0c3RfbWV0aG9kID09IFRTVF9U
MV9QQVJFTlQpIHsKCQlwaWRfdCBwaWQ7CgoJCS8qIHNldCB0aGUgY3R4IGZvciB0aGUgbmV4dCBl
eGVjICovCgkJaWYgKGFyZ2MgPj0gMykgewoJCQlwcmludGYoIj4+PiBzZXQgTFNNL1NFTGludXgg
ZXhlYzogJXNcbiIsCgkJCSAgICAgICAoc2VsaW51eF9leGVjKGFyZ3ZbMl0pID4gMCA/ICJPSyIg
OiAiRkFJTEVEIikpOwoJCX0KCgkJLyogZm9yay9leGVjICovCgkJcGlkID0gZm9yaygpOwoJCWlm
ICghcGlkKSB7CgkJCS8qIHN0YXJ0IHRoZSBjaGlsZCAqLwoJCQlyYyA9IGV4ZWNsKGFyZ3ZbMF0s
IGFyZ3ZbMF0sICJ0MV9jaGlsZCIsIChjaGFyICopTlVMTCk7CgkJCWlmIChyYyA8IDApCgkJCQlm
YXRhbCgiZXhlYyIpOwoJCX0gZWxzZSB7CgkJCS8qIHdhaXQgZm9yIHRoZSBjaGlsZCB0byBleGl0
ICovCgkJCWludCBzdGF0dXM7CgkJCXdhaXRwaWQocGlkLCAmc3RhdHVzLCAwKTsKCQkJaWYgKFdJ
RkVYSVRFRChzdGF0dXMpKQoJCQkJcmMgPSBXRVhJVFNUQVRVUyhzdGF0dXMpOwoJCX0KCX0KCgkv
KgoJICogcnVuIHRlc3QocykKCSAqLwoJaWYgKHRzdF9tZXRob2QgPT0gVFNUX1NRUE9MTCB8fCB0
c3RfbWV0aG9kID09IFRTVF9UMV9DSElMRCkgewoJCXJjID0gdXJpbmdfb3BfYShyaW5nLCBjZmdf
cC0+cmluZ19jcmVkcywgIi90bXAvaW91cmluZy40LnR4dCIpOwoJCWlmIChyYyA8IDApCgkJCWZh
dGFsKCJ1cmluZ19vcF9hKFwiL3RtcC9pb3VyaW5nLjQudHh0XCIpIik7Cgl9CgoJLyoKCSAqIGNs
ZWFudXAKCSAqLwoJaWYgKHRzdF9tZXRob2QgPT0gVFNUX1NRUE9MTCB8fCB0c3RfbWV0aG9kID09
IFRTVF9UMV9QQVJFTlQpIHsKCQlwcmludGYoIj4+PiBzaHV0ZG93blxuIik7CgkJdXJpbmdfc2h1
dGRvd24oJmNmZ19wLT5yaW5nKTsKCQlzaG1fdW5saW5rKFVSSU5HX1NITV9OQU1FKTsKCX0gZWxz
ZSBpZiAodHN0X21ldGhvZCA9PSBUU1RfVDFfQ0hJTEQpIHsKCQlzaG1fdW5saW5rKFVSSU5HX1NI
TV9OQU1FKTsKCX0KCglyZXR1cm4gcmM7Cn0K
--000000000000b8e52705ca55a5a6--
