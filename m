Return-Path: <linux-fsdevel-owner@vger.kernel.org>
X-Original-To: lists+linux-fsdevel@lfdr.de
Delivered-To: lists+linux-fsdevel@lfdr.de
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by mail.lfdr.de (Postfix) with ESMTP id 91B322DB62D
	for <lists+linux-fsdevel@lfdr.de>; Tue, 15 Dec 2020 22:59:14 +0100 (CET)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728336AbgLOV6t (ORCPT <rfc822;lists+linux-fsdevel@lfdr.de>);
        Tue, 15 Dec 2020 16:58:49 -0500
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:55894 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1731021AbgLOV6l (ORCPT
        <rfc822;linux-fsdevel@vger.kernel.org>);
        Tue, 15 Dec 2020 16:58:41 -0500
Received: from mail-ed1-x541.google.com (mail-ed1-x541.google.com [IPv6:2a00:1450:4864:20::541])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id B0D6AC0613D3;
        Tue, 15 Dec 2020 13:58:00 -0800 (PST)
Received: by mail-ed1-x541.google.com with SMTP id r5so22663566eda.12;
        Tue, 15 Dec 2020 13:58:00 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=mime-version:references:in-reply-to:from:date:message-id:subject:to
         :cc;
        bh=N1a8xrDPCZ026HQdK8Vq1OhFGNFowbJMgK6N8VyjyPY=;
        b=jtrl3dfR/1vQ5dt76KTjESXT1RBhUqhuN0XasnNWtE4bFMBb+uXjOcAaFG4Tw5eosA
         NQNGDova2B2qfvEMPrC0OhMSY00X9O3Pt0ktdk8KVoPawxC4WBo2VfrX4Eyj3lzqYsH7
         tRkBecZ1rn3rbM5+Xv7pysLnpNckkwfTs01NvA/RERFPbjESx4D04DIjfBcYlz236UmL
         VP6nQbNfmifDYWUYwr2KOwth3UpQCbZ2pX1jDtN1cTy02602tdB5fbFCMzPXgGg5CSzD
         1UEaohj0mCAhTxfdF2wRkgT3ZvWg9JzIWDzKtM5lLuHYtjUoqd/KZ0Yr8cbkxT+f2DUt
         Y9vA==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:references:in-reply-to:from:date
         :message-id:subject:to:cc;
        bh=N1a8xrDPCZ026HQdK8Vq1OhFGNFowbJMgK6N8VyjyPY=;
        b=Lo0N8QFgJdHnDLKjaJRlU7n4iAX8oCram0Qh33ESuqRyDRF+WBCgZINPUymSyJDAm5
         WCzBsz0C+ISgMnNgBq5odANbcxcMZAslmcbf4jOuIfSL1hHV+94unl7CyYHb7eFeg9hW
         7VrW7xthAJKtBp7NQeNrQmRX3USd11bcwtfAgcs0f26sOKgGdZ9y+E1F52f4bi5BJnS5
         0thg6IEcoL1mmeWAM1+XsHOBBAooo1TKvc3RkRA45aD3NagM8ojFWLz9mDd/I20dLZHN
         o4irZJjQfVrZYtER4peMhws9AekI/d+fqfTLw0dXC9czhZJG73d/CgZThbRM4hToUU1X
         aGLg==
X-Gm-Message-State: AOAM533BISvJvPKBatMOiFI4b3CZRTOgxGkO/t7BKRUdXzPnroF192RR
        DnWztYwW0Rdj1CeQ8w/Mnuq8T0dAnXwYq0WUp0Y=
X-Google-Smtp-Source: ABdhPJz2iMox1eHPojxlVeQmLPOYNsyRWakO6o+Lc8pqKLjCy/wbT6pwNGUBgys4AUvniZ8JaLwxZ/Hz8TIby4klQ7A=
X-Received: by 2002:a05:6402:ca2:: with SMTP id cn2mr31266268edb.137.1608069479463;
 Tue, 15 Dec 2020 13:57:59 -0800 (PST)
MIME-Version: 1.0
References: <20201214223722.232537-1-shy828301@gmail.com> <20201214223722.232537-6-shy828301@gmail.com>
 <20201215022233.GL3913616@dread.disaster.area> <20201215144516.GE379720@cmpxchg.org>
In-Reply-To: <20201215144516.GE379720@cmpxchg.org>
From:   Yang Shi <shy828301@gmail.com>
Date:   Tue, 15 Dec 2020 13:57:47 -0800
Message-ID: <CAHbLzkr0=f4xNiPA-OuF6sdzV5-RVkx9y_1rUmn2yWU2Kd8uhQ@mail.gmail.com>
Subject: Re: [v2 PATCH 5/9] mm: memcontrol: add per memcg shrinker nr_deferred
To:     Johannes Weiner <hannes@cmpxchg.org>
Cc:     Dave Chinner <david@fromorbit.com>, Roman Gushchin <guro@fb.com>,
        Kirill Tkhai <ktkhai@virtuozzo.com>,
        Shakeel Butt <shakeelb@google.com>,
        Michal Hocko <mhocko@suse.com>,
        Andrew Morton <akpm@linux-foundation.org>,
        Linux MM <linux-mm@kvack.org>,
        Linux FS-devel Mailing List <linux-fsdevel@vger.kernel.org>,
        Linux Kernel Mailing List <linux-kernel@vger.kernel.org>
Content-Type: text/plain; charset="UTF-8"
Precedence: bulk
List-ID: <linux-fsdevel.vger.kernel.org>
X-Mailing-List: linux-fsdevel@vger.kernel.org

On Tue, Dec 15, 2020 at 6:47 AM Johannes Weiner <hannes@cmpxchg.org> wrote:
>
> On Tue, Dec 15, 2020 at 01:22:33PM +1100, Dave Chinner wrote:
> > On Mon, Dec 14, 2020 at 02:37:18PM -0800, Yang Shi wrote:
> > > Currently the number of deferred objects are per shrinker, but some slabs, for example,
> > > vfs inode/dentry cache are per memcg, this would result in poor isolation among memcgs.
> > >
> > > The deferred objects typically are generated by __GFP_NOFS allocations, one memcg with
> > > excessive __GFP_NOFS allocations may blow up deferred objects, then other innocent memcgs
> > > may suffer from over shrink, excessive reclaim latency, etc.
> > >
> > > For example, two workloads run in memcgA and memcgB respectively, workload in B is vfs
> > > heavy workload.  Workload in A generates excessive deferred objects, then B's vfs cache
> > > might be hit heavily (drop half of caches) by B's limit reclaim or global reclaim.
> > >
> > > We observed this hit in our production environment which was running vfs heavy workload
> > > shown as the below tracing log:
> > >
> > > <...>-409454 [016] .... 28286961.747146: mm_shrink_slab_start: super_cache_scan+0x0/0x1a0 ffff9a83046f3458:
> > > nid: 1 objects to shrink 3641681686040 gfp_flags GFP_HIGHUSER_MOVABLE|__GFP_ZERO pgs_scanned 1 lru_pgs 15721
> > > cache items 246404277 delta 31345 total_scan 123202138
> > > <...>-409454 [022] .... 28287105.928018: mm_shrink_slab_end: super_cache_scan+0x0/0x1a0 ffff9a83046f3458:
> > > nid: 1 unused scan count 3641681686040 new scan count 3641798379189 total_scan 602
> > > last shrinker return val 123186855
> > >
> > > The vfs cache and page cache ration was 10:1 on this machine, and half of caches were dropped.
> > > This also resulted in significant amount of page caches were dropped due to inodes eviction.
> > >
> > > Make nr_deferred per memcg for memcg aware shrinkers would solve the unfairness and bring
> > > better isolation.
> > >
> > > When memcg is not enabled (!CONFIG_MEMCG or memcg disabled), the shrinker's nr_deferred
> > > would be used.  And non memcg aware shrinkers use shrinker's nr_deferred all the time.
> > >
> > > Signed-off-by: Yang Shi <shy828301@gmail.com>
> > > ---
> > >  include/linux/memcontrol.h |   9 +++
> > >  mm/memcontrol.c            | 110 ++++++++++++++++++++++++++++++++++++-
> > >  mm/vmscan.c                |   4 ++
> > >  3 files changed, 120 insertions(+), 3 deletions(-)
> > >
> > > diff --git a/include/linux/memcontrol.h b/include/linux/memcontrol.h
> > > index 922a7f600465..1b343b268359 100644
> > > --- a/include/linux/memcontrol.h
> > > +++ b/include/linux/memcontrol.h
> > > @@ -92,6 +92,13 @@ struct lruvec_stat {
> > >     long count[NR_VM_NODE_STAT_ITEMS];
> > >  };
> > >
> > > +
> > > +/* Shrinker::id indexed nr_deferred of memcg-aware shrinkers. */
> > > +struct memcg_shrinker_deferred {
> > > +   struct rcu_head rcu;
> > > +   atomic_long_t nr_deferred[];
> > > +};
> >
> > So you're effectively copy and pasting the memcg_shrinker_map
> > infrastructure and doubling the number of allocations/frees required
> > to set up/tear down a memcg? Why not add it to the struct
> > memcg_shrinker_map like this:
> >
> > struct memcg_shrinker_map {
> >         struct rcu_head       rcu;
> >       unsigned long   *map;
> >       atomic_long_t   *nr_deferred;
> > };
> >
> > And when you dynamically allocate the structure, set the map and
> > nr_deferred pointers to the correct offset in the allocated range.
> >
> > Then this patch is really only changes to the size of the chunk
> > being allocated, setting up the pointers and copying the relevant
> > data from the old to new.
>
> Fully agreed.

Thanks folks. Such idea has been discussed with Roman in the earlier
emails. I agree this would make the code neater. Will do it in v3.

>
> In the longer-term, it may be nice to further expand this and make
> this the generalized intersection between cgroup, node and shrinkers.
>
> There is large overlap with list_lru e.g. - with data of identical
> scope and lifetime, but duplicative callbacks and management. If we
> folded list_lru_memcg into the above data structure, we could also
> generalize and reuse the existing callbacks.

Yes, agree we should look further to combine and deduplicate all the
pieces for the long run.
